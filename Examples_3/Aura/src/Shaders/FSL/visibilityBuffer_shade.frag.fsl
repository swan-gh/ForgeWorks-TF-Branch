/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "packing.h.fsl"
#include "shading.h.fsl"
#include "lpvCommon_example.h.fsl"
#include "wind.h.fsl"

// USERMACRO: USE_LPV [0,1]
// USERMACRO: ENABLE_SUN [0,1]

// This shader loads draw / triangle Id per pixel and reconstruct interpolated vertex data.

STRUCT(PsIn)
{
	DATA(float4, position,  SV_Position);
	DATA(float2, screenPos, TEXCOORD0);
};

struct DerivativesOutput
{
	float3 db_dx;
	float3 db_dy;
};

// Computes the partial derivatives of a triangle from the projected screen space vertices
DerivativesOutput computePartialDerivatives(float2 v[3])
{
	DerivativesOutput result;
	float d = 1.0 / determinant(f2x2(v[2] - v[1], v[0] - v[1]));
	result.db_dx = float3(v[1].y - v[2].y, v[2].y - v[0].y, v[0].y - v[1].y) * d;
	result.db_dy = float3(v[2].x - v[1].x, v[0].x - v[2].x, v[1].x - v[0].x) * d;

	return result;
}

// Helper functions to interpolate vertex attributes at point 'd' using the partial derivatives
float3 interpolateAttribute(f3x3 attributes, float3 db_dx, float3 db_dy, float2 d)
{
	float3 attribute_x = mul(db_dx, attributes);
	float3 attribute_y = mul(db_dy, attributes);
	float3 attribute_s = getRow0(attributes);

	return (attribute_s + d.x * attribute_x + d.y * attribute_y);
}

float interpolateAttribute(float3 attributes, float3 db_dx, float3 db_dy, float2 d)
{
	float attribute_x = dot(attributes, db_dx);
	float attribute_y = dot(attributes, db_dy);
	float attribute_s = attributes[0];

	return (attribute_s + d.x * attribute_x + d.y * attribute_y);
}

struct GradientInterpolationResults
{
	float2 interp;
	float2 dx;
	float2 dy;
};

// Interpolate 2D attributes using the partial derivatives and generates dx and dy for texture sampling.
GradientInterpolationResults interpolateAttributeWithGradient(f3x2 attributes, float3 db_dx, float3 db_dy, float2 d, float2 pTwoOverRes)
{
	float3 attr0 = getRow0(attributes);
	float3 attr1 = getRow1(attributes);
	float2 attribute_x = float2(dot(db_dx, attr0), dot(db_dx, attr1));
	float2 attribute_y = float2(dot(db_dy, attr0), dot(db_dy, attr1));
	float2 attribute_s = getCol0(attributes);

	GradientInterpolationResults result;
	result.dx = attribute_x * pTwoOverRes.x;
	result.dy = attribute_y * pTwoOverRes.y;
	result.interp = (attribute_s + d.x * attribute_x + d.y * attribute_y);
	return result;
}

float depthLinearization(float depth, float near, float far)
{
	return (2.0 * near) / (far + near - depth * (far - near));
}


RES(Tex2D(float4), vbTex,     UPDATE_FREQ_NONE, t0, binding = 0);
RES(Tex2D(float),  shadowMap, UPDATE_FREQ_NONE, t1, binding = 1);

RES(ByteBuffer,            vertexPos,           UPDATE_FREQ_NONE, t2, binding = 2);
RES(ByteBuffer,            vertexTexCoord,      UPDATE_FREQ_NONE, t3, binding = 3);
RES(ByteBuffer,            vertexNormal,        UPDATE_FREQ_NONE, t4, binding = 4);
RES(ByteBuffer,            vertexTangent,       UPDATE_FREQ_NONE, t5, binding = 5);
RES(Buffer(MeshConstants), meshConstantsBuffer, UPDATE_FREQ_NONE, t6, binding = 6);
RES(Buffer(LightData),     lights,              UPDATE_FREQ_NONE, t7, binding = 7);
RES(SamplerState,          textureSampler,      UPDATE_FREQ_NONE, s0, binding = 8);
RES(SamplerState,          depthSampler,        UPDATE_FREQ_NONE, s1, binding = 9);
RES(SamplerState,          linearBorderSampler, UPDATE_FREQ_NONE, s2, binding = 10);

#if defined(METAL) || defined(ORBIS) || defined(PROSPERO)
	RES(Tex2D(float4), diffuseMaps[MATERIAL_BUFFER_SIZE],  UPDATE_FREQ_NONE, t0, binding = 10);
	RES(Tex2D(float4), normalMaps[MATERIAL_BUFFER_SIZE],   UPDATE_FREQ_NONE, t1, binding = 10);
	RES(Tex2D(float4), specularMaps[MATERIAL_BUFFER_SIZE], UPDATE_FREQ_NONE, t2, binding = 10);
#else
	RES(Tex2D(float4), diffuseMaps[MATERIAL_BUFFER_SIZE],  space4, t0, binding = 11);
	RES(Tex2D(float4), normalMaps[MATERIAL_BUFFER_SIZE],   space5, t0, binding = 11 + MAX_TEXTURE_UNITS);
	RES(Tex2D(float4), specularMaps[MATERIAL_BUFFER_SIZE], space6, t0, binding = 11 + MAX_TEXTURE_UNITS * 2);
#endif

RES(ByteBuffer,   filteredIndexBuffer,    UPDATE_FREQ_PER_FRAME, t0, binding = 1);
RES(Buffer(uint), indirectMaterialBuffer, UPDATE_FREQ_PER_FRAME, t1, binding = 2);
RES(Buffer(uint), indirectDrawArgs[2],    UPDATE_FREQ_PER_FRAME, t2, binding = 3);
RES(ByteBuffer,   lightClustersCount,     UPDATE_FREQ_PER_FRAME, t4, binding = 5);
RES(ByteBuffer,   lightClusters,          UPDATE_FREQ_PER_FRAME, t5, binding = 6);

CBUFFER(auraApplyLightData, UPDATE_FREQ_PER_FRAME, b1, binding = 7)
{
	DATA(LightApplyData, lightApplyData, None);
};

#include "lpvLightApply.h.fsl"

float4 PS_MAIN(PsIn In)
{
	INIT_MAIN;
	// Load Visibility Buffer raw packed float4 data from render target
	float4 visRaw = LoadTex2D(Get(vbTex), Get(depthSampler), uint2(In.position.xy), 0);
	// Unpack float4 render target data into uint to extract data
	uint alphaBit_drawID_triID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (alphaBit_drawID_triID == ~0u)
	{
		discard;
	}

	// Extract packed data
	uint drawID = (alphaBit_drawID_triID >> 23) & 0x000000FF;
	uint triangleID = (alphaBit_drawID_triID & 0x007FFFFF);
	uint alpha1_opaque0 = (alphaBit_drawID_triID >> 31);

	// This is the start vertex of the current draw batch
	uint startIndexOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 2;
	uint startIndex = alpha1_opaque0 == 0 ?
		Get(indirectDrawArgs)[0][drawID * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset] :
		Get(indirectDrawArgs)[1][drawID * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset];

	// BaseMaterialBuffer returns constant offset values
	// The following value defines the maximum amount of indirect draw calls that will be 
	// drawn at once. This value depends on the number of submeshes or individual objects 
	// in the scene. Changing a scene will require to change this value accordingly.
	// #define MAX_DRAWS_INDIRECT 300 
	//
	// These values are offsets used to point to the material data depending on the 
	// type of geometry and on the culling view
	// #define MATERIAL_BASE_ALPHA0 0
	// #define MATERIAL_BASE_NOALPHA0 MAX_DRAWS_INDIRECT
	// #define MATERIAL_BASE_ALPHA1 (MAX_DRAWS_INDIRECT*2)
	// #define MATERIAL_BASE_NOALPHA1 (MAX_DRAWS_INDIRECT*3)
	uint materialBaseSlot = BaseMaterialBuffer(alpha1_opaque0 == 1, VIEW_CAMERA);

	// potential results for materialBaseSlot + drawID are
	// 0 - 299 - shadow alpha
	// 300 - 599 - shadow no alpha
	// 600 - 899 - camera alpha
	uint materialID = Get(indirectMaterialBuffer)[materialBaseSlot + drawID];

	uint triIdx0 = (triangleID * 3 + 0) + startIndex;
	uint triIdx1 = (triangleID * 3 + 1) + startIndex;
	uint triIdx2 = (triangleID * 3 + 2) + startIndex;

	uint index0 = LoadByte(Get(filteredIndexBuffer), triIdx0 << 2);
	uint index1 = LoadByte(Get(filteredIndexBuffer), triIdx1 << 2);
	uint index2 = LoadByte(Get(filteredIndexBuffer), triIdx2 << 2);

	// Load vertex data of the 3 vertices
	float3 v0pos = LoadVertex(Get(vertexPos), index0).xyz;
	float3 v1pos = LoadVertex(Get(vertexPos), index1).xyz;
	float3 v2pos = LoadVertex(Get(vertexPos), index2).xyz;

	// Apply wind tranform iuf mateiral ID matches cloth
	if (materialID == CLOTH_ID)
	{
		v0pos.xyz = WindTransformWorldPosition(v0pos.xyz, Get(windData));
		v1pos.xyz = WindTransformWorldPosition(v1pos.xyz, Get(windData));
		v2pos.xyz = WindTransformWorldPosition(v2pos.xyz, Get(windData));
	}

	// Transform positions to clip space
	float4 pos0 = mul(Get(transform)[VIEW_CAMERA].mvp, float4(v0pos, 1.0f));
	float4 pos1 = mul(Get(transform)[VIEW_CAMERA].mvp, float4(v1pos, 1.0f));
	float4 pos2 = mul(Get(transform)[VIEW_CAMERA].mvp, float4(v2pos, 1.0f));

	// Calculate the inverse of w, since it's going to be used several times
	float3 one_over_w = 1.0f / float3(pos0.w, pos1.w, pos2.w);

	// Project vertex positions to calculate 2D post-perspective positions
	pos0 *= one_over_w[0];
	pos1 *= one_over_w[1];
	pos2 *= one_over_w[2];

	float2 pos_scr[3] = { pos0.xy, pos1.xy, pos2.xy };

	// Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
	DerivativesOutput derivativesOut = computePartialDerivatives(pos_scr);

	// Calculate delta vector (d) that points from the projected vertex 0 to the current screen point
	float2 d = In.screenPos + -pos_scr[0];

	// Interpolate the 1/w (one_over_w) for all three vertices of the triangle
	// using the barycentric coordinates and the delta vector
	float w = 1.0f / interpolateAttribute(one_over_w, derivativesOut.db_dx, derivativesOut.db_dy, d);

	// Reconstruct the Z value at this screen point performing only the necessary matrix * vector multiplication
	// operations that involve computing Z
	float z = w * getElem(Get(transform)[VIEW_CAMERA].projection, 2, 2) + getElem(Get(transform)[VIEW_CAMERA].projection, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using In.screenPos and the computed Z value at this point.
	// Then, multiplying the perspective projected coordinates by the inverse view-projection matrix (invVP) produces world coordinates
	float3 position = mul(Get(transform)[VIEW_CAMERA].invVP, float4(In.screenPos * w, z, w)).xyz;

	// TEXTURE COORD INTERPOLATION
	// Apply perspective correction to texture coordinates
	f3x2 texCoords = make_f3x2_cols(
		unpack2Floats(LoadByte(Get(vertexTexCoord), index0 << 2)) * one_over_w[0],
		unpack2Floats(LoadByte(Get(vertexTexCoord), index1 << 2)) * one_over_w[1],
		unpack2Floats(LoadByte(Get(vertexTexCoord), index2 << 2)) * one_over_w[2]
	);

	// Interpolate texture coordinates and calculate the gradients for texture sampling with mipmapping support
	GradientInterpolationResults results = interpolateAttributeWithGradient(texCoords, derivativesOut.db_dx, derivativesOut.db_dy, d, Get(twoOverRes));
			
	float linearZ = depthLinearization(z/w, Get(CameraPlane).x, Get(CameraPlane).y);
	float mip = pow(pow(linearZ, 0.9f) * 5.0f, 1.5f);
	
	float2 texCoordDX = results.dx * w * mip;
	float2 texCoordDY = results.dy * w * mip;
	float2 texCoord = results.interp * w;
	

	/////////////LOAD///////////////////////////////
	// TANGENT INTERPOLATION
	// Apply perspective division to tangents
	f3x3 tangents = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index0 << 2))) * one_over_w[0],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index1 << 2))) * one_over_w[1],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index2 << 2))) * one_over_w[2]
	);

	float3 tangent = normalize(interpolateAttribute(tangents, derivativesOut.db_dx, derivativesOut.db_dy, d));

	// CALCULATE PIXEL COLOR USING INTERPOLATED ATTRIBUTES
	// Reconstruct normal map Z from X and Y
	// "NonUniformResourceIndex" is a "pseudo" function see
	// http://asawicki.info/news_1608_direct3d_12_-_watch_out_for_non-uniform_resource_index.html

	// Get textures from arrays.
	float4 normalMapRG;
	float4 diffuseColor;
	float4 specularColor;
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapRG   = SampleGradTex2D(Get(normalMaps)[materialID],   Get(textureSampler), texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(Get(diffuseMaps)[materialID],  Get(textureSampler), texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(Get(specularMaps)[materialID], Get(textureSampler), texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapRG.ga * 2.0f - 1.0f;
	reconstructedNormalMap.z  = sqrt(1 - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy));

	// NORMAL INTERPOLATION
	// Apply perspective division to normals
	f3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index0 << 2))) * one_over_w[0],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index1 << 2))) * one_over_w[1],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index2 << 2))) * one_over_w[2]
	);
	float3 normal = normalize(interpolateAttribute(normals, derivativesOut.db_dx, derivativesOut.db_dy, d));

	if (materialID == CLOTH_ID)
	{
		normal  = WindTransformWorldNormal(normal,  position, Get(windData));
		tangent = WindTransformWorldNormal(tangent, position, Get(windData));
	}

	// Calculate vertex binormal from normal and tangent
	float3 binormal = normalize(cross(tangent, normal));

	// Calculate pixel normal using the normal map and the tangent space vectors
	normal = reconstructedNormalMap.x * tangent + reconstructedNormalMap.y * binormal + reconstructedNormalMap.z * normal;

	// Sample Diffuse color
	float4 posLS = mul(Get(transform)[VIEW_SHADOW].vp, float4(position, 1.0f));
	
	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	bool isTwoSided = (alpha1_opaque0 == 1) && bool(Get(meshConstantsBuffer)[materialID].twoSided);
	bool isBackFace = false;

	float3 ViewVec = normalize(Get(camPos).xyz - position.xyz);
	
	//if it is backface
	//this should be < 0 but our mesh's edge normals are smoothed, badly
	if (isTwoSided && dot(normal, ViewVec) < 0.0f)
	{
		//flip normal
		normal = -normal;
		isBackFace = true;
	}

	float3 HalfVec = normalize(ViewVec - Get(lightDir).xyz);
	float3 ReflectVec = reflect(-ViewVec, normal);
	float NoV = saturate(dot(normal, ViewVec));

	float NoL = dot(normal, -Get(lightDir).xyz);

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	float3 shadedColor = f3(0.0f);

	float3 F0 = specularColor.xyz;
	float3 DiffuseColor = diffuseColor.xyz;
	float shadowFactor = 1.0f;
	float fLightingMode = saturate(float(Get(lightingMode)));

#if ENABLE_SUN
	shadedColor = calculateIllumination(
                                        normal,
                                        ViewVec,
                                        HalfVec,
                                        ReflectVec,
                                        NoL,
                                        NoV,
                                        Get(camPos).xyz,
                                        Get(esmControl),
                                        Get(lightDir).xyz,
                                        posLS,
                                        position,
                                        Get(shadowMap),
                                        DiffuseColor,
                                        F0,
                                        Roughness,
                                        Metallic,			
                                        Get(depthSampler),
                                        isBackFace,
                                        fLightingMode,
                                        shadowFactor);
		
	shadedColor = shadedColor * Get(lightColor).rgb * Get(lightColor).a * NoL;
#endif
	// point lights
	// Find the light cluster for the current pixel
	uint2 clusterCoords = uint2(floor((In.screenPos * 0.5f + 0.5f) * float2(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT)));

	uint numLightsInCluster = LoadByte(Get(lightClustersCount), LIGHT_CLUSTER_COUNT_POS(clusterCoords.x, clusterCoords.y) << 2);

	// Accumulate light contributions
	for (uint j = 0; j < numLightsInCluster; ++j)
	{
		uint lightId = LoadByte(Get(lightClusters), LIGHT_CLUSTER_DATA_POS(j, clusterCoords.x, clusterCoords.y) << 2);

		shadedColor += pointLightShade(
                                       normal,
                                       ViewVec,
                                       HalfVec,
                                       ReflectVec,
                                       NoL,
                                       NoV,
                                       Get(lights)[lightId].position.xyz,
                                       Get(lights)[lightId].color.xyz,
                                       Get(camPos).xyz,
                                       Get(lightDir).xyz,
                                       posLS,
                                       position,
                                       DiffuseColor,
                                       F0,
                                       Roughness,
                                       Metallic,		
                                       isBackFace,
                                       fLightingMode);
	}

#if USE_LPV
	AuraIndirectLight indirectLight;
	indirectLight.diffuse  = float4(0.0f, 0.0f, 0.0f, 1.0f);
	indirectLight.specular = float4(0.0f, 0.0f, 0.0f, 1.0f);

	for (uint j = 0; j < Get(lightApplyData).cascadeCount; ++j)
	{
		Aura_ApplyLightForCascade(
                                  j,
                                  position,
                                  normal,
                                  Get(lightApplyData).normalScale,
                                  Get(lightApplyData).cascade[j].WorldToGridScale,
                                  Get(lightApplyData).cascade[j].WorldToGridTranslate,
                                  Get(lightApplyData).cascade[j].smoothGridPosOffset,
                                  Get(lightApplyData).camPos,
                                  Get(lightApplyData).cascade[j].lightScale,
                                  Get(lightApplyData).GIStrength,
                                  Get(lightApplyData).lumScale.x,
                                  Get(lightApplyData).lumScale.y,
                                  Get(lightApplyData).lumScale.z,
                                  Get(lightApplyData).cascade[j].cellFalloff,
                                  int(Get(specularQuality)),
                                  Get(linearBorderSampler),
                                  indirectLight);
	}

	shadedColor += diffuseColor.xyz * indirectLight.diffuse.xyz;
	shadedColor += diffuseColor.xyz * indirectLight.specular.xyz;
#endif

	RETURN(float4(shadedColor, 1.0f));
}


