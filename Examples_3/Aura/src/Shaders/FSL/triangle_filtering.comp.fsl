//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

// Confetti changes
// Culling triangles that intersect the near plane
// Small primitive culling now supports MSAA
// Multi-viewport culling

// This compute shader performs triangle filtering by executing different visibility tests for every triangle.
// Triangles that pass all tests are appended into the filteredTriangles buffer.
// Triangles that fail any of the tests are just ignored and hence discarded.
// For every triangle that passes the tests, the vertexCount property of IndirectDrawArguments is incremented in 3. This
// property is used later during rendering the scene geometry to determine the amount of triangles to draw per batch.

#include "shader_defs.h.fsl"
#include "cull_resources.h.fsl"
#include "wind.h.fsl"

#define ENABLE_CULL_INDEX            1
#define ENABLE_CULL_BACKFACE         1
#define ENABLE_CULL_FRUSTUM          1
#define ENABLE_CULL_SMALL_PRIMITIVES 1
#define ENABLE_GUARD_BAND            0

GroupShared(atomic_uint, workGroupOutputSlot[NUM_CULLING_VIEWPORTS]);
GroupShared(atomic_uint, workGroupIndexCount[NUM_CULLING_VIEWPORTS]);

// Performs all the culling tests given 3 vertices
bool FilterTriangle(uint indices[3], float4 vertices[3], bool cullBackFace, float2 windowSize, uint samples)
{
#if ENABLE_CULL_INDEX
	if (indices[0] == indices[1] || 
        indices[1] == indices[2] || 
        indices[0] == indices[2])
	{
		return true;
	}
#endif

#if ENABLE_CULL_BACKFACE
	if (cullBackFace)
	{
		// Culling in homogeneus coordinates.
		// Read: "Triangle Scan Conversion using 2D Homogeneus Coordinates"
		//       by Marc Olano, Trey Greer
		float3x3 m = float3x3(vertices[0].xyw, vertices[1].xyw, vertices[2].xyw);
		if (determinant(m) > 0)
			return true;
	}
#endif

#if ENABLE_CULL_FRUSTUM || ENABLE_CULL_SMALL_PRIMITIVES
	int verticesInFrontOfNearPlane = 0;

	for (uint i = 0; i < 3; ++i)
	{
		if (vertices[i].w < 0.0f)
		{
			++verticesInFrontOfNearPlane;

			// Flip the w so that any triangle that straddles the plane won't be projected onto
			// two sides of the screen
			vertices[i].w *= (-1.0f);
		}
		// Transform vertices[i].xy into the normalized 0..1 screen space
		// this is for the following stages ...
		vertices[i].xy /= vertices[i].w * 2.0f;
		vertices[i].xy += f2(0.5f);
	}
#endif

#if ENABLE_CULL_FRUSTUM
	if (verticesInFrontOfNearPlane == 3)
		return true;

	float minx = min(min(vertices[0].x, vertices[1].x), vertices[2].x);
	float miny = min(min(vertices[0].y, vertices[1].y), vertices[2].y);
	float maxx = max(max(vertices[0].x, vertices[1].x), vertices[2].x);
	float maxy = max(max(vertices[0].y, vertices[1].y), vertices[2].y);

	if ((maxx < 0.0f) || (maxy < 0.0f) || (minx > 1.0f) || (miny > 1.0f))
		return true;
#endif

	// not precise enough to handle more than 4 msaa samples
#if ENABLE_CULL_SMALL_PRIMITIVES
	if (verticesInFrontOfNearPlane == 0)
	{
		const uint SUBPIXEL_BITS = 8;
		const uint SUBPIXEL_MASK = 0xFF;
		const uint SUBPIXEL_SAMPLES = 1U << SUBPIXEL_BITS;

		/*
		Computing this in float-point is not precise enough.
		We switch to a 23.8 representation here which shold match the
		HW subpixel resolution.
		We use a 8-bit wide guard-band to avoid clipping. If
		a triangle is outside the guard-band, it will be ignored.
		That is, the actual viewport supported here is 31 bit, one bit is
		unused, and the guard band is 1 << 23 bit large (8388608 pixels)
		*/

		int2 minBB = int2(1 << 30, 1 << 30);
		int2 maxBB = -minBB;

#if ENABLE_GUARD_BAND			
		bool insideGuardBand = true;
#endif
		for (uint i = 0; i < 3; ++i)
		{
			float2 screenSpacePositionFP = vertices[i].xy * windowSize;

#if ENABLE_GUARD_BAND			
			// Check if we should overflow after conversion
			if (screenSpacePositionFP.x < -(1 << 23) ||
				screenSpacePositionFP.x > (1 << 23) ||
				screenSpacePositionFP.y < -(1 << 23) ||
				screenSpacePositionFP.y > (1 << 23))
			{
				insideGuardBand = false;
			}
#endif

			// Scale based on distance from center to msaa sample point
			int2 screenSpacePosition = int2(screenSpacePositionFP * (SUBPIXEL_SAMPLES * samples));
			minBB = min(screenSpacePosition, minBB);
			maxBB = max(screenSpacePosition, maxBB);
		}

#if ENABLE_GUARD_BAND			
		if (insideGuardBand)
#endif
		{
			const uint SUBPIXEL_SAMPLE_CENTER = SUBPIXEL_SAMPLES / 2;
			const uint SUBPIXEL_SAMPLE_SIZE = SUBPIXEL_SAMPLES - 1;
			/* Test is:
			Is the minimum of the bounding box right or above the sample
			point and is the width less than the pixel width in samples in
			one direction.

			This will also cull very long triagles which fall between
			multiple samples.
			*/

			if (any(And(GreaterThan(minBB & SUBPIXEL_MASK, SUBPIXEL_SAMPLE_CENTER),
				LessThan(maxBB - ((minBB & ~SUBPIXEL_MASK) + SUBPIXEL_SAMPLE_CENTER), SUBPIXEL_SAMPLE_SIZE))))
			{
				return true;
			}
		}
	}
#endif

	return false;
}

NUM_THREADS(CLUSTER_SIZE, 1, 1)
void CS_MAIN(SV_GroupThreadID(uint3) inGroupId, SV_GroupID(uint3) groupId)
{
	INIT_MAIN;

	if (inGroupId.x == 0)
	{
		UNROLL_N(NUM_CULLING_VIEWPORTS)
		for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
			AtomicStore(Get(workGroupIndexCount)[i], 0u);
	}

	GroupMemoryBarrier();

	bool cull[NUM_CULLING_VIEWPORTS];
	uint threadOutputSlot[NUM_CULLING_VIEWPORTS];

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		threadOutputSlot[i] = 0;
		cull[i] = true;
	}

	uint batchMeshIndex = Get(smallBatchDataBuffer)[groupId.x].meshIndex;
	uint batchInputIndexOffset = (Get(meshConstantsBuffer)[batchMeshIndex].indexOffset + Get(smallBatchDataBuffer)[groupId.x].indexOffset);
	bool twoSided = (Get(meshConstantsBuffer)[batchMeshIndex].twoSided == 1);

	uint indices[3] = { 0, 0, 0 };
	if (inGroupId.x < Get(smallBatchDataBuffer)[groupId.x].faceCount)
	{
		indices[0] = LoadByte(Get(indexDataBuffer), (inGroupId.x * 3 + 0 + batchInputIndexOffset) << 2);
		indices[1] = LoadByte(Get(indexDataBuffer), (inGroupId.x * 3 + 1 + batchInputIndexOffset) << 2);
		indices[2] = LoadByte(Get(indexDataBuffer), (inGroupId.x * 3 + 2 + batchInputIndexOffset) << 2);

		float4 vert[3] =
		{
			LoadVertex(Get(vertexDataBuffer), indices[0]),
			LoadVertex(Get(vertexDataBuffer), indices[1]),
			LoadVertex(Get(vertexDataBuffer), indices[2])
		};

		UNROLL_N(NUM_CULLING_VIEWPORTS)
		for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
		{
			float4x4 worldViewProjection = Get(transform)[i].mvp;
			float4 vertices[3] =
			{
				mul(worldViewProjection, vert[0]),
				mul(worldViewProjection, vert[1]),
				mul(worldViewProjection, vert[2])
			};

			CullingViewPort viewport = Get(cullingViewports)[i];

			cull[i] = Get(meshConstantsBuffer)[batchMeshIndex].materialID != CLOTH_ID && FilterTriangle(indices, vertices, !twoSided, viewport.windowSize, viewport.sampleCount);
			if (!cull[i])
                AtomicAdd(Get(workGroupIndexCount)[i], 3, threadOutputSlot[i]);
		}
	}

	GroupMemoryBarrier();

	uint accumBatchDrawIndex = Get(smallBatchDataBuffer)[groupId.x].accumDrawIndex;

	if (inGroupId.x == 0)
	{
		UNROLL_N(NUM_CULLING_VIEWPORTS)
		for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
		{
            AtomicAdd(Get(uncompactedDrawArgsRW)[i][accumBatchDrawIndex].numIndices, Get(workGroupIndexCount)[i], Get(workGroupOutputSlot)[i]);
		}
	}

	AllMemoryBarrier();

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		if (!cull[i])
		{
			uint index = AtomicLoad(Get(workGroupOutputSlot)[i]);
			StoreByte(Get(filteredIndicesBuffer)[i], (index + Get(smallBatchDataBuffer)[groupId.x].outputIndexOffset + threadOutputSlot[i] + 0) << 2, indices[0]);
			StoreByte(Get(filteredIndicesBuffer)[i], (index + Get(smallBatchDataBuffer)[groupId.x].outputIndexOffset + threadOutputSlot[i] + 1) << 2, indices[1]);
			StoreByte(Get(filteredIndicesBuffer)[i], (index + Get(smallBatchDataBuffer)[groupId.x].outputIndexOffset + threadOutputSlot[i] + 2) << 2, indices[2]);
		}
	}

	if (inGroupId.x == 0 && groupId.x == Get(smallBatchDataBuffer)[groupId.x].drawBatchStart)
	{
		uint outIndexOffset = Get(smallBatchDataBuffer)[groupId.x].outputIndexOffset;

		UNROLL_N(NUM_CULLING_VIEWPORTS)
		for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
		{
			Get(uncompactedDrawArgsRW)[i][accumBatchDrawIndex].startIndex = outIndexOffset;
			Get(uncompactedDrawArgsRW)[i][accumBatchDrawIndex].materialID = Get(meshConstantsBuffer)[batchMeshIndex].materialID;
		}
	}

	RETURN();
}
