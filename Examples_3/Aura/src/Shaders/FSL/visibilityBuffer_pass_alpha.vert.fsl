/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "shader_defs.h.fsl"
#include "vb_rsm_resources.h.fsl"
#include "packing.h.fsl"
#include "wind.h.fsl"

STRUCT(VsIn)
{
	DATA(float3, position, POSITION);
	DATA(uint,   texCoord, TEXCOORD0);
};

STRUCT(VsOut)
{
	DATA(float4,     position, SV_Position);
	DATA(float2,     texCoord, TEXCOORD0);
#if !defined(INDIRECT_ROOT_CONSTANT)
    DATA(FLAT(uint), drawID,   TEXCOORD1);
#endif
};

VsOut VS_MAIN(VsIn In, SV_InstanceID(uint) InstanceID)
{
	INIT_MAIN;

	VsOut Out;

	uint matBaseSlot = BaseMaterialBuffer(true, VIEW_CAMERA); 
	uint materialID  = Get(indirectMaterialBuffer)[matBaseSlot + getDrawID()];

	if (materialID == CLOTH_ID)
		In.position.xyz = WindTransformWorldPosition(In.position.xyz, Get(windData));

	Out.position = mul(Get(transform)[VIEW_CAMERA].mvp, float4(In.position, 1.0f));
	Out.texCoord = unpack2Floats(In.texCoord);
	SET_DRAW_ID(Out, drawID, InstanceID);

	RETURN(Out);
}
