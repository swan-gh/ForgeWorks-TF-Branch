/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "shader_defs.h.fsl"
#include "cull_resources.h.fsl"

// This compute shader is ran over all indirect draw arguments - 0 - MAX_INDIRECT_DRAWS

// After the triangle filtering stage, we have all the data needed for indirect drawing - filtered index buffer and the indirect draw arguments
// Only caveat is that the indirect draw argument buffer has holes in places where the draws were culled

// These holes impact performance since the GPU command processor has to do all the work setting up data for that draw and in the end just throw it all away since it was an empty draw call
// To fix these holes, we run another pass - batch compaction which will remove these holes
// This process also fills the per draw indirect material buffer which holds the material index for that draw
// This process also fills the final draw counter which will be passed to the execute indirect draw call on the CPU side

// Before Batch Compaction, the indirect argument buffer
// [ Indirect Draw, Empty Draw, Indirect Draw, Empty Draw, ...]

// After the batch compaction, the indirect draw buffer looks like this
// [ Indirect Draw, Indirect Draw ]

// Indirect draw argument buffer layout
// [ Indirect Draw 0, Indirect Draw 1, Indirect Draw 2, ... Indirect Draw MAX_INDIRECT_DRAWS, Draw counter passed to the execute indirect call on CPU side ]


NUM_THREADS(CLEAR_THREAD_COUNT, 1, 1)
void CS_MAIN(SV_DispatchThreadID(uint3) threadID)
{
	INIT_MAIN;

	if (threadID.x >= MAX_DRAWS_INDIRECT - 1)
		RETURN();

	uint numIndices[NUM_CULLING_VIEWPORTS];
	uint sum = 0;

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		numIndices[i] = Get(uncompactedDrawArgs)[i][threadID.x].numIndices;
		sum += numIndices[i];
	}

	// If this thread is dealing with an empty draw, early return
	if (sum == 0)
		RETURN();

	uint slot = 0;

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		if (numIndices[i] > 0)
		{
			uint matID = Get(uncompactedDrawArgs)[i][threadID.x].materialID;
			bool hasAlpha = (Get(materialProps)[matID] == 1);
			uint baseMatSlot = BaseMaterialBuffer(hasAlpha, i);

			uint indexCountOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 0;
			uint startIndexOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 2;

			if (hasAlpha)
			{
				AtomicAdd(Get(indirectDrawArgsBufferAlpha)[i][DRAW_COUNTER_SLOT_POS], 1, slot);
				AtomicStore(Get(indirectDrawArgsBufferAlpha)[i][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + indexCountOffset], numIndices[i]);
				AtomicStore(Get(indirectDrawArgsBufferAlpha)[i][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset], Get(uncompactedDrawArgs)[i][threadID.x].startIndex);
			}
			else
			{
				AtomicAdd(Get(indirectDrawArgsBufferNoAlpha)[i][DRAW_COUNTER_SLOT_POS], 1, slot);
				AtomicStore(Get(indirectDrawArgsBufferNoAlpha)[i][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + indexCountOffset], numIndices[i]);
				AtomicStore(Get(indirectDrawArgsBufferNoAlpha)[i][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset], Get(uncompactedDrawArgs)[i][threadID.x].startIndex);
			}
			Get(indirectMaterialBuffer)[baseMatSlot + slot] = matID;
		}
	}

	RETURN();
}
