/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 *
 * This file(code) is licensed under a
 * Creative Commons Attribution-NonCommercial 4.0 International License
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode)
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#ifndef LPV_COMMON_H
#define LPV_COMMON_H

#ifndef NO_FSL_DEFINITIONS
#include "lightPropagation_example.h.fsl"

float3 LPVtoOccluders(const float3 tc) { return tc + f3(LPVtoOccludersOffset); }
float3 OccludersToLPV(const float3 tc) { return tc - f3(LPVtoOccludersOffset); }

float calculateBorderFadeout(float3 gridPos)
{
	float borderSize = 4.0f / GridRes;
	float3 borderScale = smoothstep(1.0f, 1.0f - borderSize, gridPos);
	borderScale *= smoothstep(0.0f, borderSize, gridPos);
	float borderFactor = borderScale.x*borderScale.y*borderScale.z;
	borderFactor = pow(borderFactor, 0.5f);

	return borderFactor;
}

STRUCT(LightInjectionData)
{
	DATA(f4x4,          invMvp,               None);
	DATA(packed_float3, WorldToGridScale,     None);
	DATA(float,         scaleFactor,          None); // Blocking potential scale factor. See details in CPP code
	DATA(float3,        WorldToGridTranslate, None);
	DATA(float3,        camDir,               None);
	DATA(float3,        smoothGridPosOffset,  None);
	DATA(uint2,         RSMRes,               None);
};

STRUCT(LightApplyCascadeData)
{
	DATA(float4,        cellFalloff,          None);
	DATA(float3,        WorldToGridScale,     None);
	DATA(float3,        WorldToGridTranslate, None);
	DATA(packed_float3, smoothGridPosOffset,  None);
	DATA(float,         lightScale,           None);
};

STRUCT(LightApplyData)
{
	DATA(f4x4,                  invMvp,       None);
	DATA(packed_float3,         normalScale,  None);
	DATA(uint,                  cascadeCount, None);
	DATA(packed_float3,         camPos,       None);
	DATA(float,                 GIStrength,   None);
	DATA(float3,                lumScale,     None);
	DATA(LightApplyCascadeData, cascade[3],   None);
};
#endif

#ifdef ORBIS
#define PAD(n)
#else
#define PAD(n) uint _pad##n
#endif

#ifdef NO_FSL_DEFINITIONS
struct LightInjectionData
{
	aura::float4x4 invMvp;
	//===================================
	aura::float3   WorldToGridScale;
	float          scaleFactor; // Blocking potential scale factor. See details in CPP code
	//===================================
	aura::float3   WorldToGridTranslate;
	PAD(0);
	//===================================
	aura::float3   camDir;
	PAD(1);
	//===================================
	aura::float3   smoothGridPosOffset;
	PAD(2);
	//===================================
	aura::uint2    RSMRes;
	//===================================
};

struct LightApplyCascadeData
{
	aura::float4 cellFalloff;
	//===================================
	aura::float3 WorldToGridScale;
	PAD(0);
	//===================================
	aura::float3 WorldToGridTranslate;
	PAD(1);
	//===================================
	aura::float3 smoothGridPosOffset;
	float        lightScale;
	//===================================
};

struct LightApplyData
{
	aura::float4x4        invMvp;
	//===================================
	aura::float3          normalScale;
	uint                  cascadeCount;
	//===================================
	aura::float3          camPos;
	float                 GIStrength;
	//===================================
	aura::float3          lumScale;
	PAD(0);
	//===================================
	LightApplyCascadeData cascade[3];
	//===================================
};

struct VisualizationData
{
	aura::float4x4 GridToCamera;
	aura::float4x4 projection;
	aura::float4x4 invView;
	float          probeRadius;
	float          lightScale;
};
#endif

#endif // LPV_COMMON_H