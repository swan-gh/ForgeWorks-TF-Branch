/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#define NUM_THREADS_X 16 
#define NUM_THREADS_Y 16
#define NUM_THREADS_Z 1

PUSH_CONSTANT(RootConstant, b0)
{
	DATA(uint, mip,     None);
	DATA(uint, maxSize, None);
};

RES(Tex2D(float4),        srcTexture,    UPDATE_FREQ_NONE,     t0, binding = 0);
RES(RWTex2DArray(float4), dstTexture,    UPDATE_FREQ_PER_DRAW, u0, binding = 0);
RES(SamplerState,         skyboxSampler, UPDATE_FREQ_NONE,     s0, binding = 1);

NUM_THREADS(NUM_THREADS_X, NUM_THREADS_Y, NUM_THREADS_Z)
void CS_MAIN(SV_DispatchThreadID(uint3) DTid)
{
	INIT_MAIN;

	float2 invAtan   = float2(0.1591f, 0.3183f);
	float3 threadPos = float3(DTid);

	// uint mip = mip;

	//for (uint mip = 0; mip < uRootConstants.nMips; ++mip)
	{
		uint mipSize = Get(maxSize) >> Get(mip);
		if (threadPos.x >= mipSize || threadPos.y >= mipSize) 
			RETURN();

		float2 texcoords = float2(float(threadPos.x + 0.5) / mipSize, 1.0f - float(threadPos.y + 0.5) / mipSize);
		float3 sphereDir = f3(0.0f);
		if (threadPos.z <= 0) {
			sphereDir = normalize(float3(0.5, -(texcoords.y - 0.5), -(texcoords.x - 0.5)));
		}
		else if (threadPos.z <= 1) {
			sphereDir = normalize(float3(-0.5, -(texcoords.y - 0.5), texcoords.x - 0.5));
		}
		else if (threadPos.z <= 2) {
			sphereDir = normalize(float3(texcoords.x - 0.5, -0.5, -(texcoords.y - 0.5)));
		}
		else if (threadPos.z <= 3) {
			sphereDir = normalize(float3(texcoords.x - 0.5, 0.5, texcoords.y - 0.5));
		}
		else if (threadPos.z <= 4) {
			sphereDir = normalize(float3(texcoords.x - 0.5, -(texcoords.y - 0.5), 0.5));
		}
		else if (threadPos.z <= 5) {
			sphereDir = normalize(float3(-(texcoords.x - 0.5), -(texcoords.y - 0.5), -0.5));
		}

		float2 panoUVs = float2(atan2(sphereDir.z, sphereDir.x), asin(sphereDir.y));
		panoUVs *= invAtan;
		panoUVs += 0.5f;

		// We need to use SampleLevel, since compute shaders do not support regular sampling 
        float4 value = SampleLvlTex2D(Get(srcTexture), Get(skyboxSampler), panoUVs, float(Get(mip)));
		Write3D(Get(dstTexture), int3(threadPos.xyz), value);
	}

	RETURN();
}
