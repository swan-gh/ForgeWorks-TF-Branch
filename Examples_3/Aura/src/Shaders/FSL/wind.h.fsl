/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 *
 * This file(code) is licensed under a
 * Creative Commons Attribution-NonCommercial 4.0 International License
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode)
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#ifndef WIND_H
#define WIND_H

#define CLOTH_ID 0

#ifndef NO_FSL_DEFINITIONS
STRUCT(WindConstants)
{
	DATA(float,         g_Time,                  None);
	// wind paramerters
	DATA(float,         gWindDetail0Amp,         None);
	DATA(float,         gWindDetail0Offset,      None);
	// per fabric parameters
	DATA(float,         gFabricRandOffset,       None);
	DATA(float,         gFabricRandPeriodFactor, None);
	DATA(float,         gFabricAnchorHeight,     None);
	DATA(float,         gFabricFreeHeight,       None);
	DATA(uint,          _pad0,                   None);
	DATA(packed_float3, gFabricAmplitude,        None);
	DATA(uint,          _pad1,                   None);
};

// Wind functions
float3 WindPerturbation(float3 pos, WindConstants windData)
{
	float randOffset = windData.gFabricRandOffset; //1.f; //dot(World[3].xyz, 1.0f);
	//float randOffset = dot(pos.xyz, 1.0f);
	float randPeriod = rcp((windData.gFabricAnchorHeight - windData.gFabricFreeHeight) / windData.gFabricRandPeriodFactor + 0.3f * frac(randOffset * 53.0f)) + (pos.x * 0.001321f);
	float sint, cost;
	sincos(randOffset + randPeriod * windData.g_Time, sint, cost);
	cost = 1.0f - sqrt(1.0f - sign(sint) * pow(abs(sint) * 0.5f, 2.0f));
	float sinhy = sinh(clamp((windData.gFabricAnchorHeight - pos.y) * 2.0f * rcp(windData.gFabricAnchorHeight - windData.gFabricFreeHeight), 0.0f, 2.0f));

	float detailOffset = dot(normalize(rcp(windData.gFabricAmplitude + 0.01f)), pos);

	float detail = 0.0f;
	detail += 0.115f * sin(randOffset + 6.33f * windData.g_Time - 0.08f * detailOffset);
	detail += 0.150f * sin(randOffset + 5.77f * windData.g_Time - 0.04f * detailOffset);
	//	detail += 0.027f * sin(randOffset + 4.11f * g_Time - 0.09f * pos.y);
	detail *= 0.85f + 0.15f * sin(randOffset + 7.11f * windData.g_Time - 0.09f * pos.y);

	return float2(cost, sint + (0.5f + 0.5f * abs(sint)) * detail).yxy * windData.gFabricAmplitude * sinhy;
}

float3 WindTransformWorldPosition(float3 pos, WindConstants windData)
{
	pos.xyz += WindPerturbation(pos, windData);
	return pos;
}

float3 WindTransformWorldNormal(float3 normal, float3 pos, WindConstants windData)
{
	normal.y += dot(WindPerturbation(pos, windData).xz, normal.xz) * 10.0f * rcp(windData.gFabricAnchorHeight - windData.gFabricFreeHeight);
	return normal;
}
#endif // NO_FSL_DEFINITIONS

#ifdef NO_FSL_DEFINITIONS
struct WindConstants
{
	float  g_Time;
	// wind paramerters
	float  gWindDetail0Amp;
	float  gWindDetail0Offset;
	// per fabric parameters
	float  gFabricRandOffset;
	float  gFabricRandPeriodFactor;
	float  gFabricAnchorHeight;
	float  gFabricFreeHeight;
	uint   _pad0;
	float3 gFabricAmplitude;
	uint   _pad1;
};

#endif // NO_FSL_DEFINITIONS

#endif // WIND_H