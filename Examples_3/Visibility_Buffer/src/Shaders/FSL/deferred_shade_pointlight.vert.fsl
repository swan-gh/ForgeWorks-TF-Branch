/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shading.h.fsl"

STRUCT(VSInput)
{
    DATA(float4, Position, POSITION);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float3, Color, TEXCOORD0);
    DATA(float3, LightPos, TEXCOORD1);
};

RES(Buffer(LightData), lights, UPDATE_FREQ_NONE, t1, binding = 1);

VSOutput VS_MAIN( VSInput In, SV_InstanceID(uint) instanceId )
{
    INIT_MAIN;
    VSOutput Out;
    Out.LightPos = Get(lights)[instanceId].position.xyz;
    Out.Color = Get(lights)[instanceId].color.xyz;
    float4x4 vp = Get(transform)[VIEW_CAMERA].vp;
    float4 p = float4((In.Position.xyz * LIGHT_SIZE) + Out.LightPos, 1);
    Out.Position = mul(vp, p);
    RETURN(Out);
}
