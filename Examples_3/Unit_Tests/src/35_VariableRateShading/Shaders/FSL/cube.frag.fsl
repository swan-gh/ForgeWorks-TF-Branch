/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#define D3D12_SHADING_RATE_1X1 0
#define D3D12_SHADING_RATE_1X2 1
#define D3D12_SHADING_RATE_2X1 4
#define D3D12_SHADING_RATE_2X2 5
#define D3D12_SHADING_RATE_2X4 6
#define D3D12_SHADING_RATE_4X2 9
#define D3D12_SHADING_RATE_4X4 10
#define SR_COUNT 7

STRUCT(VSOutput)
{
    DATA(float4, position,  SV_POSITION);
    DATA(float4, Color,     COLOR);
    DATA(float2, TexCoords, TEXCOORD0);
};

PUSH_CONSTANT(cbRootConstant, b0)
{
    DATA(float, toggleDebugView, None);
};

RES(SamplerState,  uSampler,  UPDATE_FREQ_NONE, s1, binding = 0);
RES(Tex2D(float4), uTexture1, UPDATE_FREQ_NONE, t2, binding = 2);

float4 PS_MAIN(VSOutput In, SV_ShadingRate(uint) shadingRate)
{
    INIT_MAIN;
    float4 color;
    color = SampleTex2D(Get(uTexture1), Get(uSampler), In.TexCoords) * In.Color;

    if (Get(toggleDebugView) == 0.0)
        RETURN(color);

    if (shadingRate == D3D12_SHADING_RATE_1X1)
    {
        color.rgb = float3(0.44, 1.0, 0.49);
        RETURN(color);
    }
    if (shadingRate == D3D12_SHADING_RATE_1X2)
    {
        color.rgb = float3(0.44, 0.49, 1.0);
        RETURN(color);
    }
    if (shadingRate == D3D12_SHADING_RATE_2X1)
    {
        color.rgb = float3(0.239, 0.309, 1);
        RETURN(color);
    }  
    if (shadingRate == D3D12_SHADING_RATE_2X2)
    {
        color.rgb = float3(0.9, 0.9, 0.0);
        RETURN(color);
    } 
    if (shadingRate == D3D12_SHADING_RATE_2X4)
    {
        color.rgb = float3(0.9, 0.9, 0.0);
        RETURN(color);
    }
    if (shadingRate == D3D12_SHADING_RATE_4X2)
    {
        color.rgb = float3(1.0, 0.6, 0.5);
        RETURN(color);
    }
    if (shadingRate == D3D12_SHADING_RATE_4X4)
    {
        color.rgb = float3(1.0, 0.0, 0.0);
        RETURN(color);
    }
    
    RETURN(color);
}