/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "resources.h.fsl"

// Input control point
STRUCT(HullOut)
{
	// DATA(float4, position, POSITION); // TODO: check if SV_Position is correct here
	DATA(float4, position, SV_Position);
	DATA(float4, tese_v1, NORMAL0);
	DATA(float4, tese_v2, NORMAL1);
	DATA(float4, tese_up, NORMAL2);
	DATA(float4, tese_widthDir,NORMAL3);
};

// Input patch constant data.
STRUCT(PatchTess)
{
	DATA(float, Edges[4], SV_TessFactor);
	DATA(float, Inside[2], SV_InsideTessFactor)	;
};

STRUCT(DS_OUTPUT)
{
    DATA(float4, Position, SV_Position);
    DATA(float3, Normal, NORMAL);
    DATA(float3, WindDirection, BINORMAL);
    DATA(float2, UV, TEXCOORD);
};

TESS_LAYOUT("quad", "integer", "triangle_ccw")
DS_OUTPUT TE_MAIN( OUTPUT_PATCH(HullOut, 1) Patch, PatchTess In, SV_DomainLocation(float2) UV )
{
    INIT_MAIN;
    DS_OUTPUT Output;

    float u = UV.x;
    float v = UV.y;

    float3 a = Patch[0].position.xyz + v * (Patch[0].tese_v1.xyz - Patch[0].position.xyz);
    float3 b = Patch[0].tese_v1.xyz  + v * (Patch[0].tese_v2.xyz - Patch[0].tese_v1.xyz);
	float3 c = a + v*(b - a);

	float3 t1 = Patch[0].tese_widthDir.xyz; //bitangent
	float3 wt1 = t1 * Patch[0].tese_v2.w * 0.5;

    float3 c0 = c - wt1;
    float3 c1 = c + wt1;

    float3 t0 = normalize(b - a);

    Output.Normal = normalize(cross(t1, t0));

    float t = u + 0.5*v -u*v;
    Output.Position.xyz = (1.0 - t)*c0 + t*c1;
    Output.Position = mul(Get(viewProj), float4(Output.Position.xyz, 1));

    Output.UV = UV.xy;
    Output.WindDirection = Patch[0].tese_widthDir.xyz;

    RETURN(Output);
}
