/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "resources.h.fsl"

// Output control point
STRUCT(HullOut)
{
	DATA(float4, position, SV_Position);
	DATA(float4, tese_v1,NORMAL0);
	DATA(float4, tese_v2,NORMAL1);
	DATA(float4, tese_up,NORMAL2);
	DATA(float4, tese_widthDir,NORMAL3);
};

// Output patch constant data.
STRUCT(PatchTess)
{
	DATA(float, Edges[4], SV_TessFactor);
	DATA(float, Inside[2], SV_InsideTessFactor)	;
};

// Patch Constant Function
PatchTess ConstantHS( INPUT_PATCH(VS_CONTROL_POINT_OUTPUT, 1) ip, SV_PrimitiveID(uint) PatchID )
{
	PCF_INIT;
	PatchTess Output;
	
	float4 WorldPosV0 = ip[PatchID].position; //float4(ip[PatchID].position.xyz, 1.0);

	float near = 0.1;
	float far = 25.0;
	
	float depth = -(mul(Get(view), WorldPosV0)).z / (far - near);
	depth = saturate(depth);

	float minLevel = 1.0;

	depth = depth*depth;

	float level = lerp(float(Get(gMaxTessellationLevel)), minLevel, depth);	
	
	Output.Inside[0] = 1.0; //horizontal
	Output.Inside[1] = level; //vertical

	Output.Edges[0] = level; //vertical
	Output.Edges[1] = 1.0; //horizontal
	Output.Edges[2] = level; //vertical
	Output.Edges[3] = 1.0; //horizontal

	PCF_RETURN(Output);
}

PATCH_CONSTANT_FUNC("ConstantHS")
TESS_LAYOUT("quad", "integer", "triangle_ccw")
OUTPUT_CONTROL_POINTS(1)
MAX_TESS_FACTOR(10.0f)
HullOut TC_MAIN( INPUT_PATCH(VS_CONTROL_POINT_OUTPUT, 1) ip, SV_OutputControlPointID(uint) patchIndex )
{
	INIT_MAIN;
	HullOut Out;

	Out.position = ip[patchIndex].position;
	Out.tese_v1 = ip[patchIndex].tesc_v1;
	Out.tese_v2 = ip[patchIndex].tesc_v2;

	Out.tese_up = float4(
		ip[patchIndex].tesc_up_x,
		ip[patchIndex].tesc_up_y,
		ip[patchIndex].tesc_up_z,
		ip[patchIndex].tesc_up_w);

	Out.tese_widthDir = float4(
		ip[patchIndex].tesc_widthDir_x,
		ip[patchIndex].tesc_widthDir_y,
		ip[patchIndex].tesc_widthDir_z,
		ip[patchIndex].tesc_widthDir_w);
	
	RETURN(Out);
	
}
