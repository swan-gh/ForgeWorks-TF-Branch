/*
* Copyright (c) 2017-2022 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT 4
#endif

#include "SDF_Constant.h.fsl"

RES(Tex2D(float2), SDFShadowTexture, UPDATE_FREQ_NONE, t0, binding = 0);

#if SAMPLE_COUNT > 1
RES(Tex2DMS(float, SAMPLE_COUNT), DepthTexture, UPDATE_FREQ_NONE, t1, binding = 1);
#else
RES(Tex2D(float), DepthTexture, UPDATE_FREQ_NONE, t1, binding = 1);
#endif

RES(SamplerState, clampMiplessLinearSampler, UPDATE_FREQ_NONE, s0, binding = 2);
RES(SamplerState, clampMiplessNearSampler, UPDATE_FREQ_NONE, s1, binding = 3);

CBUFFER(cameraUniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 4)
{
    DATA(float4x4, View, None);
    DATA(float4x4, Project, None);
    DATA(float4x4, ViewProject, None);
    DATA(float4x4, InvView, None);
	DATA(float4x4, InvProj, None);
	DATA(float4x4, InvViewProject, None);
	DATA(float4, mCameraPos, None);
	DATA(float, mNear, None);
	DATA(float, mFarNearDiff, None);
	DATA(float, mFarNear, None);
	DATA(float, paddingForAlignment0, None);
	DATA(float2, mTwoOverRes, None);
	DATA(float, _pad1, None);
	DATA(float, _pad2, None);
	DATA(float2, mWindowSize, None);
	DATA(float, _pad3, None);
	DATA(float, _pad4, None);
	DATA(float4, mDeviceZToWorldZ, None);
};

STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
};

STRUCT(PsOut)
{
	DATA(float, FinalColor, SV_Target0);
};

float ConvertFromDeviceZ(float deviceZ)
{
	const float4 deviceZToWorldZ = Get(mDeviceZToWorldZ);
	return deviceZ * deviceZToWorldZ.x + deviceZToWorldZ.y + 1.0f / (deviceZ * deviceZToWorldZ.z - deviceZToWorldZ.w);
}

PsOut PS_MAIN( PsIn In, SV_SampleIndex(uint) i )
{
	INIT_MAIN;
	PsOut Out;
	float2 UV = In.TexCoord.xy;
#if SAMPLE_COUNT > 1
	float depthVal = LoadTex2DMS(Get(DepthTexture), Get(clampMiplessNearSampler), uint2(In.Position.xy), i).r;
#else
	float depthVal = SampleTex2D(Get(DepthTexture), Get(clampMiplessNearSampler), UV).r;
#endif
	float worldDepth = ConvertFromDeviceZ(depthVal);
	
	float2 downSampledTextureSize = floor(Get(mWindowSize).xy / SDF_SHADOW_DOWNSAMPLE_VALUE);
	float2 downSampledTexelSize = 1.0f / downSampledTextureSize.xy;

	//get the top left corner of this UV coord
	float2 cornerUV = floor(UV.xy * downSampledTextureSize - 0.5f) / 
		downSampledTextureSize.xy + 0.5f * downSampledTexelSize;
	
	float2 billinearWeights = (UV.xy - cornerUV.xy) * downSampledTextureSize;

	float2 textureValues_00 = SampleTex2D(Get(SDFShadowTexture), 
		Get(clampMiplessLinearSampler), cornerUV).xy;
	float2 textureValues_10 = SampleTex2D(Get(SDFShadowTexture), 
		Get(clampMiplessLinearSampler), cornerUV + float2(downSampledTexelSize.x, 0.f)).xy;
	float2 textureValues_01 = SampleTex2D(Get(SDFShadowTexture), 
		Get(clampMiplessLinearSampler), cornerUV + float2(0.f, downSampledTexelSize.y)).xy;
	float2 textureValues_11 = SampleTex2D(Get(SDFShadowTexture), 
		Get(clampMiplessLinearSampler), cornerUV + downSampledTexelSize).xy;

	float4 cornerWeights = float4(  ( (1.f - billinearWeights.y) * (1.f - billinearWeights.x) ),
		(1.f - billinearWeights.y) * billinearWeights.x,
		(1.f - billinearWeights.x) * billinearWeights.y,
		(billinearWeights.x * billinearWeights.y) 
	);

	float epilson = pow(10.f, -4.f);

	float4 cornerDepths = abs(float4(textureValues_00.y, 
		textureValues_10.y, textureValues_01.y, textureValues_11.y));

	float4 depthWeights = 1.0f / ((abs(cornerDepths - f4(worldDepth)) + epilson));
	float4 finalWeights = cornerWeights * depthWeights;

	float interpolatedResult = (
		finalWeights.x * textureValues_00.x + 
		finalWeights.y * textureValues_10.x + 
		finalWeights.z * textureValues_01.x + 
		finalWeights.w * textureValues_11.x);

	interpolatedResult /= dot(finalWeights, f4(1));
	
	Out.FinalColor = interpolatedResult;

	RETURN(Out);
}
