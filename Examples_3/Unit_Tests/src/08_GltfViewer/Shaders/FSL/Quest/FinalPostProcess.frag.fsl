/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

RES(Tex2DArray(float4), sceneTexture, UPDATE_FREQ_NONE, t6, binding = 6);
RES(SamplerState, clampMiplessPointSampler, UPDATE_FREQ_NONE, s10, binding = 10);

PUSH_CONSTANT(PostProcessRootConstant, b0)
{
	DATA(int2, SceneTextureSize, None);
	DATA(float, VignetteRadius, None);
};

DECLARE_RESOURCES()

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD);
	DATA(FLAT(uint), ViewID, TEXCOORD1);
};

// Hejl Richard tone map
// http://filmicworlds.com/blog/filmic-tonemapping-operators/
float3 Hejl(float3 hdr)
{
	hdr = max(float3(0.0, 0.0, 0.0), hdr - float3(0.004, 0.004, 0.004));
	return float3(hdr * (6.2 * hdr + 0.5)) / (hdr * (6.2 * hdr + 1.7) + 0.06);
}

// Vignette
float3 Vignette(float3 src, float2 uv)
{
	int2 size = Get(SceneTextureSize);
	float2 coord = 2.0 * (uv - 0.5) * float(size.x) / float(size.y);
	float rf = sqrt(dot(coord, coord)) * Get(VignetteRadius);
	float rf2_1 = rf * rf + 1.0;
	float e = 1.0 / (rf2_1 * rf2_1);
	//e = pow(e, 2.0);
	//e = saturate(e + 0.5);

	return src * e;
}

float4 PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	float4 Out;

	float3 hdrColor = SampleTex2DArray(Get(sceneTexture), Get(clampMiplessPointSampler), float3(In.TexCoord, VR_VIEW_ID(In.ViewID))).rgb;

	float3 finalColor = Hejl(hdrColor);
	finalColor = Vignette(finalColor, In.TexCoord);

	Out = float4(finalColor, 1.0);
	RETURN(Out);
}
