/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

CBUFFER(PerFrame, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
    DATA(float4x4, WorldViewProjection, None);
    DATA(float4x4, WorldView, None);
    DATA(float4, LightDirection, None);
};

RES(Tex2D(float4), gPrecomputedDLUT, UPDATE_FREQ_NONE, t0, binding = 1);
RES(SamplerState, gPrecomputedDLUTSampler, UPDATE_FREQ_NONE, s0, binding = 2);

STRUCT(VS_Out)
{
    DATA(float4, Position, SV_Position);
    DATA(float2, UV,       TEXCOORD);
};

float4 PS_MAIN(VS_Out IN)
{
    INIT_MAIN;

    float4 dlut = SampleTex2D(Get(gPrecomputedDLUT), Get(gPrecomputedDLUTSampler), IN.UV);
    float frontTransmittance = pow((dlut.x + dlut.y + dlut.z + dlut.w) * 0.25, 0.625);
    float backTransmittance = 1.0 - frontTransmittance;
    backTransmittance = saturate(0.25 + 0.5 * (backTransmittance * backTransmittance * backTransmittance * backTransmittance));
    float alpha = max(max(max(dlut.x, dlut.y), dlut.z), dlut.w);

    float3 lightDirection = Get(LightDirection).xyz;
    float h = lightDirection.x > 0.0 ? dlut.x : dlut.z;
    float v = lightDirection.y > 0.0 ? dlut.y : dlut.w;
    float d = lightDirection.z > 0.0 ? frontTransmittance : backTransmittance;

    float transmittance = h * lightDirection.x * lightDirection.x +
        v * lightDirection.y * lightDirection.y +
        d * lightDirection.z * lightDirection.z;
    float4 color = transmittance * float4(0.94, 0.85, 0.64, alpha);

    RETURN(color);
}
