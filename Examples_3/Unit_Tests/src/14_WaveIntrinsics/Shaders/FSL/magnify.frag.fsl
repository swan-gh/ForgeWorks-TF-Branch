/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "resources.h.fsl"

STRUCT(PSInput)
{
	DATA(float4, position, SV_Position);
	DATA(float2, uv, TEXCOORD);
};

float4 PS_MAIN( PSInput In )
{
	INIT_MAIN;
	float4 Out;
	float aspectRatio = Get(resolution).x / Get(resolution).y;
	float magnifiedFactor = 6.0f;
	float magnifiedAreaSize = 0.05f;
	float magnifiedAreaBorder = 0.005f;

	// check the distance between this pixel and mouse location in UV space. 
	float2 normalizedPixelPos = In.uv;
	float2 normalizedMousePos = Get(mousePosition) / Get(resolution);         // convert mouse position to uv space.
	float2 diff = abs(normalizedPixelPos - normalizedMousePos);     // distance from this pixel to mouse.

	float4 color = SampleTex2D(Get(g_texture), Get(g_sampler), normalizedPixelPos);

	// if the distance from this pixel to mouse is touching the border of the magnified area, color it as cyan.
	if (diff.x < (magnifiedAreaSize + magnifiedAreaBorder) && diff.y < (magnifiedAreaSize + magnifiedAreaBorder)*aspectRatio)
	{
		color = float4(0.0f, 1.0f, 1.0f, 1.0f);
	}

	// if the distance from this pixel to mouse is inside the magnified area, enable the magnify effect.
	if (diff.x < magnifiedAreaSize && diff.y < magnifiedAreaSize *aspectRatio)
	{
		color = SampleTex2D(Get(g_texture), Get(g_sampler), normalizedMousePos + (normalizedPixelPos - normalizedMousePos) / magnifiedFactor);
	}

	Out = color;
	RETURN(Out);
}
