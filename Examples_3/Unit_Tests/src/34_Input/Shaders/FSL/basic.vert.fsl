/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

STRUCT(VSInput)
{
    DATA(float4, Position, POSITION);
    DATA(float2, TexCoords, TEXCOORD);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float2, TexCoords, TEXCOORD0);
    DATA(float2, Color, TEXCOORD1);
};

PUSH_CONSTANT(KPCRootConstant, b0)
{
    DATA(float2, positionOffset, None);
    DATA(float2, color, None);
    DATA(float, angle, None);
    DATA(float, projectionScale, None);
};

VSOutput VS_MAIN(VSInput In)
{
    INIT_MAIN;

    VSOutput Out;
    float cosTheta = cos(Get(angle));
    float sinTheta = sin(Get(angle));
    Out.Position.x = In.Position.x * cosTheta - In.Position.y * sinTheta;
    Out.Position.y = In.Position.x * sinTheta + In.Position.y * cosTheta;
    Out.Position.y *= Get(projectionScale);
    Out.Position.zw = In.Position.zw;
    Out.Position.xy += Get(positionOffset);
    Out.TexCoords = In.TexCoords;
    Out.Color = Get(color);

    RETURN(Out);
}
