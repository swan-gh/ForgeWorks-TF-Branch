/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The following code is a port of XeGTAO implementation that can be found at: https://github.com/GameTechDev/XeGTAO
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CBUFFER(cbCamera, UPDATE_FREQ_PER_FRAME, b1, binding = 1)
{
    DATA(float4x4, view, None);
	DATA(float4x4, projView, None);
	DATA(float4x4, prevProjView, None);
    DATA(float4x4, proj, None);
    DATA(float4x4, invProjView, None);
	DATA(float4, camPos, None);
    DATA(float, zNear, None);
    DATA(float, zFar, None);
};

PUSH_CONSTANT(RootConstant, b0)
{
	DATA(float2, ViewportPixelSize, None);
};

RES(Tex2D(float), g_sourceNDCDepth, UPDATE_FREQ_NONE, t0, binding = 2);
RES(RWTex2D(float), g_outDepth, UPDATE_FREQ_NONE, u0, binding = 3);

RES(SamplerState, depthSampler, UPDATE_FREQ_NONE, s0, binding = 4);

float ScreenSpaceToViewSpaceDepth( const float screenDepth)
{
    float near = Get(zNear);
    float far = Get(zFar);
    float z_n = 2.0f * screenDepth - 1.0f;
    return 2.0f * near * far / (far + near - z_n * (far - near)); // -near / (far - screenDepth * (far - near)) * far;
}

// This is also a good place to do non-linear depth conversion for cases where one wants the 'radius' (effectively the threshold between near-field and far-field GI), 
// is required to be non-linear (i.e. very large outdoors environments).
float XeGTAO_ClampDepth( float depth )
{
    return clamp( depth, 0.0f, 3.402823466e+38f );
}

void XeGTAO_PrefilterDepths16x16( uint2 dispatchThreadID /*: SV_DispatchThreadID*/, uint2 groupThreadID /*: SV_GroupThreadID*/)
{
    const uint2 baseCoord = dispatchThreadID;
    const uint2 pixCoord = baseCoord * 2;
    float4 gatherDepth = GatherRedTex2D(Get(g_sourceNDCDepth), Get(depthSampler), float2(pixCoord + uint2(1, 1)) * Get(ViewportPixelSize));
    float depth0 = XeGTAO_ClampDepth( ScreenSpaceToViewSpaceDepth( gatherDepth.w ) );
    float depth1 = XeGTAO_ClampDepth( ScreenSpaceToViewSpaceDepth( gatherDepth.z ) );
    float depth2 = XeGTAO_ClampDepth( ScreenSpaceToViewSpaceDepth( gatherDepth.x ) );
    float depth3 = XeGTAO_ClampDepth( ScreenSpaceToViewSpaceDepth( gatherDepth.y ) );
    Write2D(Get(g_outDepth), pixCoord + uint2(0, 0), depth0);
    Write2D(Get(g_outDepth), pixCoord + uint2(1, 0), depth1);
    Write2D(Get(g_outDepth), pixCoord + uint2(0, 1), depth2);
    Write2D(Get(g_outDepth), pixCoord + uint2(1, 1), depth3);
}

NUM_THREADS(8,  8,  1)
void CS_MAIN( SV_DispatchThreadID(uint2) did, SV_GroupID(uint2) gid )
{
	INIT_MAIN;

    XeGTAO_PrefilterDepths16x16(did, gid);

    RETURN();
}