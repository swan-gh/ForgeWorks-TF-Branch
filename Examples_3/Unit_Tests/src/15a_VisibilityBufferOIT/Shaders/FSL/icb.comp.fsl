/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This compute shader resets the vertex count property of the IndirectDrawArguments struct.
// This needs to be done before triangle filtering is executed to reset it to 0.

#include "shader_defs.h.fsl"
#include "cull_resources.h.fsl"

PUSH_CONSTANT(maxDrawsRootConstant, b0)
{
	DATA(uint, mdc, None);
};

void cmdDrawIndexedPrimitive(
                     uint tid,
                     uint commandId,
                     command_buffer cmdBuffer,
                     render_pipeline_state pipelineState,
                     constant void* _vertexDataBuffer,
                     constant void* _vertexTexCoord,
                     constant void* _vertexTangent,
                     constant void* _vertexNormal,
                     constant PerFrameConstants& uniforms,
                     constant uint* _drawIDs,
                     constant void* _texturesArgBuffer,
                     constant uint* _indirectMaterialBuffer,
                     constant IndirectDrawIndexArguments* indirectDrawArgs,
                     constant uint* _filteredIndicesBuffer,
                     constant atomic_uint* _headIndexBufferUAV,
                     constant TransparentNodeOIT* _vbDepthLinkedListUAV,
                     constant GeometryCountOIT* _geometryCountBuffer)
{
    const constant IndirectDrawIndexArguments& args(indirectDrawArgs[tid]);
    
    render_command cmd(cmdBuffer, commandId);

    if (args.indexCount)
    {
        // pipeline
        cmd.set_render_pipeline_state(pipelineState);
        
        // buffers
        cmd.set_vertex_buffer(_vertexDataBuffer,         UNIT_VBPASS_POSITION);
        cmd.set_vertex_buffer(_vertexTexCoord,           UNIT_VBPASS_TEXCOORD);
        cmd.set_vertex_buffer(_vertexTangent,            UNIT_VBPASS_TANGENT);
        cmd.set_vertex_buffer(_vertexNormal,             UNIT_VBPASS_NORMAL);
        cmd.set_vertex_buffer(&uniforms,                 UNIT_VBPASS_UNIFORMS);
        cmd.set_fragment_buffer(_texturesArgBuffer,      UNIT_VBPASS_TEXTURES);
        cmd.set_fragment_buffer(_drawIDs + tid,          UINT_VBPASS_DRAWID);
        cmd.set_fragment_buffer(_indirectMaterialBuffer, UNIT_INDIRECT_MATERIAL_RW);
        
        if (_headIndexBufferUAV && _vbDepthLinkedListUAV && _geometryCountBuffer)
        {
			cmd.set_fragment_buffer(_headIndexBufferUAV,   UNIT_VBPASS_HEADINDEX);
			cmd.set_fragment_buffer(_vbDepthLinkedListUAV, UNIT_VBPASS_LINKEDLIST);
			cmd.set_fragment_buffer(_geometryCountBuffer,  UNIT_VBPASS_GEOMCOUNT);
        }

        cmd.draw_indexed_primitives(
                          primitive_type::triangle,                         // primitive type
                          args.indexCount,                                  // index count
                          _filteredIndicesBuffer + args.startIndex,          // index buffer
                          args.instanceCount,                               // instance count
                          args.vertexOffset,                                // base vertex
                          args.startInstance                                // base instance
        );
    }
    else
    {
        cmd.reset();
    }
}

NUM_THREADS(256, 1, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) tid3, SV_GroupThreadID(uint3) inGroupId )
{
    INIT_MAIN;
    uint tid = tid3.x;
    if (tid >= Get(mdc))
        return;
		
	uint noAlphaDrawCountsCamera = Get(indirectDrawArgsBufferNoAlphaICB)[VIEW_CAMERA][MAX_DRAWS_INDIRECT - 1].indexCount;
	uint alphaDrawCountsCamera = Get(indirectDrawArgsBufferAlphaICB)[VIEW_CAMERA][MAX_DRAWS_INDIRECT - 1].indexCount;

    // camera view
    cmdDrawIndexedPrimitive(tid,
                            tid,
                            Get(icbContainerCamera),
                            Get(piplineStatesCamera)[0],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            Get(vertexTangent),
                            Get(vertexNormal),
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            Get(texturesArgBuffer),
                            Get(indirectMaterialBufferICB),
                            Get(indirectDrawArgsBufferNoAlphaICB)[VIEW_CAMERA],
                            Get(filteredIndicesBufferICB)[VIEW_CAMERA],
                            nullptr,
                            nullptr,
                            nullptr
    );
    cmdDrawIndexedPrimitive(tid,
                            tid + noAlphaDrawCountsCamera,
                            Get(icbContainerCamera),
                            Get(piplineStatesCamera)[1],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            Get(vertexTangent),
                            Get(vertexNormal),
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            Get(texturesArgBuffer),
                            Get(indirectMaterialBufferICB),
                            Get(indirectDrawArgsBufferAlphaICB)[VIEW_CAMERA],
                            Get(filteredIndicesBufferICB)[VIEW_CAMERA],
                            nullptr,
                            nullptr,
                            nullptr
    );
    cmdDrawIndexedPrimitive(tid,
                            tid + noAlphaDrawCountsCamera + alphaDrawCountsCamera,
                            Get(icbContainerCamera),
                            Get(piplineStatesCamera)[2],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            Get(vertexTangent),
                            Get(vertexNormal),
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            Get(texturesArgBuffer),
                            Get(indirectMaterialBufferICB),
                            Get(indirectDrawArgsBufferTransparentICB)[VIEW_CAMERA],
                            Get(filteredIndicesBufferICB)[VIEW_CAMERA],
                            &Get(headIndexBufferUAV)[0],
                            &Get(vbDepthLinkedListUAV)[0],
                            &Get(geometryCountBuffer)[0]
    );

	uint noAlphaDrawCountsShadow = Get(indirectDrawArgsBufferNoAlphaICB)[VIEW_SHADOW][MAX_DRAWS_INDIRECT - 1].indexCount;
	uint alphaDrawCountsShadow = Get(indirectDrawArgsBufferAlphaICB)[VIEW_SHADOW][MAX_DRAWS_INDIRECT - 1].indexCount;

    // shadow view
    cmdDrawIndexedPrimitive(tid,
                            tid,
                            Get(icbContainerShadow),
                            Get(piplineStatesShadow)[0],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            nullptr,
                            nullptr,
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            nullptr,
                            nullptr,
                            Get(indirectDrawArgsBufferNoAlphaICB)[VIEW_SHADOW],
                            Get(filteredIndicesBufferICB)[VIEW_SHADOW],
                            nullptr,
                            nullptr,
                            nullptr
    );
    cmdDrawIndexedPrimitive(tid,
                            tid + noAlphaDrawCountsShadow,
                            Get(icbContainerShadow),
                            Get(piplineStatesShadow)[1],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            nullptr,
                            nullptr,
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            Get(texturesArgBuffer),
                            Get(indirectMaterialBufferICB),
                            Get(indirectDrawArgsBufferAlphaICB)[VIEW_SHADOW],
                            Get(filteredIndicesBufferICB)[VIEW_SHADOW],
                            nullptr,
                            nullptr,
                            nullptr
    );
    cmdDrawIndexedPrimitive(tid,
                            tid + noAlphaDrawCountsShadow + alphaDrawCountsShadow,
                            Get(icbContainerShadow),
                            Get(piplineStatesShadow)[2],
                            Get(vertexDataBuffer),
                            Get(vertexTexCoord),
                            nullptr,
                            nullptr,
                            AB_UPDATE_FREQ_PER_FRAME.PerFrameConstants,
                            Get(drawIDs)[0],
                            Get(texturesArgBuffer),
                            Get(indirectMaterialBufferICB),
                            Get(indirectDrawArgsBufferTransparentICB)[VIEW_SHADOW],
                            Get(filteredIndicesBufferICB)[VIEW_SHADOW],
                            &Get(headIndexBufferUAV)[0],
                            &Get(vbDepthLinkedListUAV)[0],
                            &Get(geometryCountBuffer)[0]
    );
    
    RETURN();
}
